@use 'sass:map';
@use 'palette';
/*****************************************************************************
Scheme Definitions
******************************************************************************/

// Validates the specified color scheme for completeness. The scheme Map must
// contain a valid color palette, an the following shades, which must be
// included by the color palette: base, alternate, accent and
// highlight.
// @param {Map} $scheme The color scheme to validate.
// @returns {Map} The valid color scheme.
@function validate-scheme($scheme) {
  @if not map.has-key($scheme, palette) {
    @error "Scheme does not define a 'palette'.";
  } @else if not map.has-key($scheme, base) {
    @error "Scheme does not define a 'base'.";
  } @else if not map.has-key($scheme, alternate) {
    @error "Scheme does not define a 'alternate'.";
  } @else if not map.has-key($scheme, accent) {
    @error "Scheme does not define a 'accent'.";
  } @else if not map.has-key($scheme, highlight) {
    @error "Scheme does not define a 'highlight'.";
  }

  $palette: palette.validate-palette(map.get($scheme, palette));

  @if not map.has-key($palette, shades, map.get($scheme, base)) {
    @error "The specified 'base' does not exist in the palette shades.";
  } @else if not map.has-key($palette, shades, map.get($scheme, alternate)) {
    @error "The specified 'alternate' does not exist in the palette shades.";
  } @else if not map.has-key($palette, shades, map.get($scheme, accent)) {
    @error "The specified 'accent' does not exist in the palette shades.";
  } @else if not map.has-key($palette, shades, map.get($scheme, highlight)) {
    @error "The specified 'highlight' does not exist in the palette shades.";
  }

  @return $scheme;
}

// Defines a color scheme. A color scheme consists of a color palette and
// certain shades. The shades include a base, a alternate and a
// accent. The shades have to be included in the color palette.
// @param {Map} $palette The color palette.
// @param {String} $base The base.
// @param {String} $alternate The alternate.
// @param {String} $accent The accent.
// @param {String} $hightlight-shade The hightlight-shade.
// @return {Map} The valid color scheme map.
@function define-scheme(
  $palette,
  $base,
  $alternate,
  $accent,
  $highlight
) {
  @return validate-scheme((
    palette: $palette,
    base: $base,
    alternate: $alternate,
    accent: $accent,
    highlight: $highlight
  ));
}

// Define default schemes.
$light-scheme: define-scheme(
  palette.$blues-desaturated-palette,
  1000,
  950,
  800,
  700
);

$dark-scheme: define-scheme(
  palette.$blues-desaturated-palette,
  0,
  50,
  200,
  300
);

$red-light-scheme: define-scheme(
  palette.$reds-desaturated-palette,
  500,
  700,
  800,
  900
);

$red-dark-scheme: define-scheme(
  palette.$reds-desaturated-palette,
  500,
  300,
  200,
  100
);

$yellow-light-scheme: define-scheme(
  palette.$yellows-saturated-palette,
  500,
  700,
  800,
  900
);

$yellow-dark-scheme: define-scheme(
  palette.$yellows-saturated-palette,
  500,
  300,
  200,
  100
);

$green-light-scheme: define-scheme(
  palette.$greens-desaturated-palette,
  500,
  700,
  800,
  900
);

$green-dark-scheme: define-scheme(
  palette.$greens-desaturated-palette,
  500,
  300,
  200,
  100
);

$blue-light-scheme: define-scheme(
  palette.$blues-saturated-palette,
  500,
  700,
  800,
  900
);

$blue-dark-scheme: define-scheme(
  palette.$blues-saturated-palette,
  500,
  300,
  200,
  100
);


$magenta-light-scheme: define-scheme(
  palette.$magentas-saturated-palette,
  500,
  700,
  800,
  900
);

$magenta-dark-scheme: define-scheme(
  palette.$magentas-saturated-palette,
  500,
  300,
  200,
  100
);
