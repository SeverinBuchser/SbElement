@use 'sass:map';
@use 'sass:meta';
@use 'paletting';
@use 'theme';
/*****************************************************************************
Theming
******************************************************************************/

// Returns the specified theme. The theme is either a theme map or a string,
// either 'dark' or 'light'.
// @param {Map | String} $theme The theme name or color-palette.
// @returns {Map} A valid theme map.
@function get-theme($theme) {
  @if meta.type-of($theme) == string {
    @if $theme == light {
      @return theme.$light-theme;
    } @else if $theme == dark {
      @return theme.$dark-theme;
    } @else {
      @error 'Theme must either be "light", "dark" or a map.';
    }
  } @else {
    @return theme.validate-theme($theme);
  }
}

// Returns the specified scheme color of the theme.
// @param {Map} $theme The theme.
// @param {String} $color The scheme-color.
// @param {String} $hue The hue of the scheme color.
// @returns {Color} The scheme color of the theme with the specified hue.
@function get-color($theme, $scheme: primary) {
  $theme: get-theme($theme);
  $scheme: map.get($theme, $scheme);
  $palette: map.get($scheme, palette);
  $shade: map.get($scheme, base);
  @return paletting.get-shade($palette, $shade);
}

// Returns the specified text color for a scheme color of the theme.
// @param {Map} $theme The theme.
// @param {String} $color The scheme-color.
// @param {String} $hue The hue of the scheme color.
// @returns {Color} The text color of the scheme color of the theme with the
// specified hue.
@function get-text($theme, $scheme: primary) {
  $theme: get-theme($theme);
  $scheme: map.get($theme, $scheme);
  $palette: map.get($scheme, palette);
  $shade: map.get($scheme, base);
  @return paletting.get-contrast($palette, $shade);
}

// Returns the inverse of the specified scheme color of the theme.
// @param {Map} $theme The theme.
// @param {String} $color The scheme-color.
// @returns {Color} The inverse scheme color of the theme.
@function get-color-inverted($theme, $scheme: primary) {
  $theme: get-theme($theme);
  $scheme: map.get($theme, $scheme);
  $palette: map.get($scheme, palette);
  $shade: map.get($scheme, alternate);
  @return paletting.get-shade($palette, $shade);
}

// Returns the text color of the inverse scheme color of the theme.
// @param {Map} $theme The theme.
// @param {String} $color The scheme-color.
// @returns {Color} The text color for the inverse scheme color of the theme.
@function get-text-inverted($theme, $scheme: primary) {
  $theme: get-theme($theme);
  $scheme: map.get($theme, $scheme);
  $palette: map.get($scheme, palette);
  $shade: map.get($scheme, alternate);
  @return paletting.get-contrast($palette, $shade);
}

// Returns the background color of the theme.
// @param {Map} $theme The theme.
// @returns {Color} The background color of the theme.
@function get-background($theme) {
  $theme: get-theme($theme);
  $scheme: map.get($theme, base);
  $palette: map.get($scheme, palette);
  $shade: map.get($scheme, base);
  @return paletting.get-shade($palette, $shade);
}

// Returns the text color of the background of the theme.
// @param {Map} $theme The theme.
// @returns {Color} The text color of the background of the theme.
@function get-background-text($theme) {
  $theme: get-theme($theme);
  $scheme: map.get($theme, base);
  $palette: map.get($scheme, palette);
  $shade: map.get($scheme, base);
  @return paletting.get-contrast($palette, $shade);
}

// Returns the foreground color of the theme.
// @param {Map} $theme The theme.
// @returns {Color} The foreground color of the theme.
@function get-foreground($theme) {
  $theme: get-theme($theme);
  $scheme: map.get($theme, base);
  $palette: map.get($scheme, palette);
  $shade: map.get($scheme, alternate);
  @return paletting.get-shade($palette, $shade);
}

// Returns the text color of the foreground of the theme.
// @param {Map} $theme The theme.
// @returns {Color} The text color of the foreground of the theme.
@function get-foreground-text($theme) {
  $theme: get-theme($theme);
  $scheme: map.get($theme, base);
  $palette: map.get($scheme, palette);
  $shade: map.get($scheme, alternate);
  @return paletting.get-contrast($palette, $shade);
}

// Returns the accent color of the theme.
// @param {Map} $theme The theme.
// @returns {Color} The accent color of the theme.
@function get-accent($theme) {
  $theme: get-theme($theme);
  $scheme: map.get($theme, base);
  $palette: map.get($scheme, palette);
  $shade: map.get($scheme, accent);
  @return paletting.get-shade($palette, $shade);
}

// Returns the text color of the accent of the theme.
// @param {Map} $theme The theme.
// @returns {Color} The text color of the accent of the theme.
@function get-accent-text($theme) {
  $theme: get-theme($theme);
  $scheme: map.get($theme, base);
  $palette: map.get($scheme, palette);
  $shade: map.get($scheme, accent);
  @return paletting.get-contrast($palette, $shade);
}

// A custom for-loop to simplyfiy the looping through each color of a theme
// palette. The loop and can be used to iterate over every color in the theme.
// @param {Map} $theme The theme.
@mixin for-each-color($theme) {
  @each $key, $scheme  in get-theme($theme) {
    @if $key != base {
      @content($key);
    }
  }
}
