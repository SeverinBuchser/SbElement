@use 'sass:map';
@use 'sass:meta';
@use 'palette';
/*****************************************************************************
Paletting
******************************************************************************/

// Returns the specified color palette. The color palette is either a color
// palette map or a string either 'reds-saturated', 'reds-desaturated',
// 'yellows-saturated', 'yellows-desaturated', 'greens-saturated',
// 'greens-desaturated', 'blues-saturated', 'blues-desaturated',
// 'magentas-saturated' and 'magentas-desaturated'.
// @param {Map | String} $palette The color palette name or color palette map.
// @returns {Map} A valid color palette map.
@function get-palette($palette) {
  @if meta.type-of($palette) == string {
    @if $palette == reds-saturated {
      @return palette.$reds-saturated-palette;
    } @else if $palette == reds-desaturated {
      @return palette.$reds-desaturated-palette;
    } @else if $palette == yellows-saturated {
      @return palette.$yellows-saturated-palette;
    } @else if $palette == yellows-desaturated {
      @return palette.$yellows-desaturated-palette;
    } @else if $palette == greens-saturated {
      @return palette.$greens-saturated-palette;
    } @else if $palette == greens-desaturated {
      @return palette.$greens-desaturated-palette;
    } @else if $palette == blues-saturated {
      @return palette.$blues-saturated-palette;
    } @else if $palette == blues-desaturated {
      @return palette.$blues-desaturated-palette;
    } @else if $palette == magentas-saturated {
      @return palette.$magentas-saturated-palette;
    } @else if $palette == magentas-desaturated {
      @return palette.$magentas-desaturated-palette;
    } @else {
      @error "Palette must be one of the following: 'reds-saturated', 'reds-desaturated', 'yellows-saturated', 'yellows-desaturated', 'greens-saturated', 'greens-desaturated', 'blues-saturated', 'blues-desaturated', 'magentas-saturated' or 'magentas-desaturated'";
    }
  } @else {
    @return palette.validate-palette($palette);
  }
}

// Returns the speficied shade of the specified color palette.
// @param {Map} $palette The palette.
// @param {String} $shade The shade.
// @returns {Color} The shade of the color palette.
@function get-shade($palette, $shade) {
  $palette: get-palette($palette);
  @return map.get($palette, shades, $shade);
}

// Returns the speficied contrast of the specified color palette.
// @param {Map} $palette The palette.
// @param {String} $contrast The contrast.
// @returns {Color} The contrast of the color palette.
@function get-contrast($palette, $contrast) {
  $palette: get-palette($palette);
  @return map.get($palette, contrasts, $contrast);
}
