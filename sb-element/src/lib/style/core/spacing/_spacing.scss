@use 'sass:map';
@use 'sass:list';
@use 'spacings';
/*****************************************************************************
Spacing
******************************************************************************/

// Returns the specified spacing.
// @param {String} $size The spacing size.
// @returns {String} The specified size.
@function get-spacing($size: d) {
  @if map.has-key(spacings.$spacings, $size) {
    @return map.get(spacings.$spacings, $size);
  } @else {
    @return $size;
  }
}


// A custom for-loop to control visibility of the $spacings variable. The loop
// can be used to iterate over every $spacing defined in spacing.$spacings.
@mixin for-each-spacing {
  @each $key, $value in spacings.$spacings {
    @content($key, $value);
  }
}


// A function to retreive the next smaller spacing if available.
// @param {String} $spacing The spacing.
// @returns {String | null} The next smaller spacing or null.
@function get-smaller($spacing) {
  $spacing-keys: map.keys(spacings.$spacings);
  $spacings-length: list.length($spacing-keys);
  $index: list.index($spacing-keys, $spacing);
  @if $index and 1 < $index and $index <= $spacings-length {
    @return list.nth($spacing-keys, $index - 1);
  }
  @return null;
}


// A function to retreive the next bigger spacing if available.
// @param {String} $spacing The spacing.
// @returns {String | null} The next bigger spacing or null.
@function get-bigger($spacing) {
  $spacing-keys: map.keys(spacings.$spacings);
  $spacings-length: list.length($spacing-keys);
  $index: list.index($spacing-keys, $spacing);
  @if $index and 0 < $index and $index < $spacings-length {
    @return list.nth($spacing-keys, $index + 1);
  }
  @return null;
}
